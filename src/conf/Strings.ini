[app]
separator = ---
session_state_check = in st.session_state and
wine_emoji = :wine_glass:
label_encoding = ] = le.fit_transform(data[
copyright = ¬© 2023 Projet ML - Analyse de Vin
home = 
navigation_prompt = Aller √†
data_analysis = Analyse
welcome_message = Bienvenue dans notre application d'analyse de vin!
bonus = Bonus
evaluation = √âvaluation
sidebar_state = expanded
features = features
machine_learning = Machine Learning
model = model
navigation = Navigation
preprocessing = Pr√©traitement
project_title = üç∑ Wine Analyzer 
select_features = S√©lectionnez les features
target = target
target_encoded = target_encoded
train_model_warning = Veuillez d'abord entra√Æner un mod√®le dans la section Machine Learning.
layout = wide
x_test = X_test
x_train = X_train
y_test = y_test
y_train = y_train
documentation = Documentation
technical_documentation = Documentation Technique
github_repo = https://github.com/N-DevZ/TP_IA_NathanDEVOISE.git
github_icon = https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
github_icon_size = 50
blank_target = _blank

[main]
svm = SVM
knn = KNN
github_repo = https://github.com/N-DevZ/TP_IA_NathanDEVOISE
github_icon = https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
naive_bayes = Naive Bayes
mlp = MLP (R√©seau de neurones)
separator = ---
target_attr = target=
width_attr = width=
comma = ,
feature_selection = , data.columns[:-2], key=
parent_dir = ..
wine_emoji = :wine_glass:
main_module = __main__
copyright = ¬© 2023 Projet ML - Analyse de Vin
home = 
navigation_prompt = Aller √†
data_analysis = Analyse
welcome_message = Bienvenue dans mon application d'analyse de vin!
bonus = Bonus
development_message = Cette section est en cours de d√©veloppement.
docs_dir = docs
documentation = Documentation
technical_documentation = Documentation Technique
evaluation = √âvaluation
sidebar_state = expanded
feature_selection_key = feature_selection_main
file_protocol = file://
index_file = index.html
docs_opened = La documentation a √©t√© ouverte dans votre navigateur.
docs_not_generated = La documentation n'a pas encore √©t√© g√©n√©r√©e. Veuillez ex√©cuter generate_docs.py d'abord.
index_not_found = Le fichier index.html n'a pas √©t√© trouv√© dans le dossier de documentation.
machine_learning = Machine Learning
navigation = Navigation
preprocessing = Pr√©traitement
project_title = üç∑Wine Analyzer
select_features = S√©lectionnez les features
target_encoded = target_encoded
select_feature_warning = Veuillez s√©lectionner au moins une feature pour continuer.
layout = wide

[preprocessing]
preprocessing_title = Pr√©traitement des donn√©es
select_columns = S√©lectionnez les colonnes √† conserver
handle_missing = G√©rer les valeurs manquantes
choose_imputation = Choisissez la m√©thode d'imputation
mean_imputation = moyenne
median_imputation = m√©diane
mode_imputation = mode
standardize_data = Standardiser les donn√©es
target = target
target_encoded = target_encoded
missing_values = Valeurs manquantes
data_types = Types de donn√©es
encoded_target = Cible encod√©e
original_target = Cible originale

[data_analysis]
hue_param = ), hue=
axis_errors = , axis=1, errors=
show_correlation = Afficher la matrice de corr√©lation
show_description = Analyse descriptive
show_pairplot = Afficher le pairplot
show_frequencies = Afficher les fr√©quences
show_distribution = Afficher les graphiques de distribution
data_analysis_title = Analyse
select_column = Choisissez une colonne
select_frequency_column = Choisissez une colonne pour les fr√©quences
colormap = coolwarm
ignore_errors = ignore
target = target
target_encoded = target_encoded

[machine_learning]
ml_title = Machine Learning
plural_s = s
comma = ,
svm = Support Vector Machine (SVM)
knn = K-Nearest Neighbors (KNN)
naive_bayes = Naive Bayes
mlp = Multi-layer Perceptron (MLP)
list_close = ],
refine_features = Affiner la s√©lection des features
choose_algorithm = Choisissez un algorithme
decision_tree = Decision Tree
train_model = Entra√Æner le mod√®le
feature_input = Entrez la valeur pour {feature}
feature_selection_key = feature_selection_ml
features = features
incomplete_text = il n
logistic_regression = Logistic Regression
machine_learning_title = Machine Learning
model = model
model_trained = Mod√®le entra√Æn√© avec succ√®s!
model_saved = Mod√®le sauvegard√© avec succ√®s!
models_dir = models
model_path = models/wine_model.joblib
prediction_result = Pr√©diction : {prediction[0]}
predict_new_data = Pr√©dire sur de nouvelles donn√©es
random_forest = Random Forest
save_model = Sauvegarder le mod√®le
train_model_warning = Veuillez d'abord entra√Æner le mod√®le.
select_features_warning = Veuillez s√©lectionner au moins une feature pour continuer.
x_test = X_test
x_train = X_train
y_test = y_test
y_train = y_train

[evaluation]
format_specifier = d
evaluation_title = √âvaluation du mod√®le
confusion_matrix = Matrice de confusion
accuracy = Pr√©cision : {accuracy:.2f}
classification_report = Rapport de classification:
train_model_warning = Veuillez d'abord entra√Æner un mod√®le dans la section Machine Learning.

[bonus]
cuda_check = if torch.cuda.is_available() else
list_start = : [
c_values = : [0.1, 1, 10],
c_param = C
cpu_device = cpu
cuda_device = cuda
train_deep_learning = Entra√Æner un mod√®le de Deep Learning (PyTorch)
run_gridsearch = Ex√©cuter GridSearchCV
run_lazy_predict = Ex√©cuter Lazy Predict
bonus_features = Fonctionnalit√©s bonus
l2_regularization = l2
lbfgs_solver = lbfgs
best_score = Meilleur score:
best_params = Meilleurs param√®tres:
deep_learning_success = Mod√®le Deep Learning entra√Æn√© avec PyTorch !
penalty_param = penalty

[deep_learning]
comma = ,
deep_learning_title = Deep Learning avec PyTorch
training_complete = Entra√Ænement termin√©!
train_deep_learning = Entra√Æner le mod√®le de Deep Learning
epoch_progress = Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}
model_accuracy = Pr√©cision du mod√®le: {accuracy:.2f}%
target = target
target_encoded = target_encoded

[data_cleaner]
cleaning_message = Nettoyage des donn√©es effectu√© : 'Vin √©uilibr√©' corrig√© en 'Vin √©quilibr√©'
saving_message = Donn√©es nettoy√©es sauvegard√©es dans {0}
cleaned_data_path = C:\Users\natha\Documents\Diginamic\TP_IA\data\cleaned_wine_data.csv

[data_loader]
comma = ,
label_encoding = ] = le.fit_transform(data[
data_var = data
file_not_found = Le fichier {data_path} n'existe pas.
target = target
target_encoded = target_encoded
data_file = vin.csv
data_path = C:/Users/natha/Documents/Diginamic/TP_IA/data/vin.csv

[documentation_technique.generate_docs]
unparse_substmt = {ast.unparse(substmt)}\n
content_attr = content=
href_attr = href=
and_f = ) and f
or_file_startswith = ) or file.startswith(
close_paren_comma = ),
replace_method = ).replace(
comma = ,
encoding_param = , encoding=
dot = .
py_extension = .py
forward_slash = /
backslash = \\
underscore = _
main_module = __main__
unparse_stmt = {ast.unparse(stmt)}\n
module_html = {module_name}.html
html_close = </body></html>
pre_close = </pre>\n
ul_close = </ul>\n
ul_body_close = </ul>\n</body></html>
module_content = <h2>Contenu du module</h2>\n
module_description = <h2>Description du module</h2>\n<p>{module_docstring}</p>\n
item_header = <h3>{item.__class__.__name__}: {item.name}</h3>\n
imports_header = <h3>Imports</h3>\n<ul>\n
arguments_header = <h4>Arguments</h4>\n<ul>\n
function_content = <h4>Contenu de la fonction</h4>\n<pre>\n
description_header = <h4>Description</h4>\n<pre>{}</pre>\n
methods_header = <h4>M√©thodes</h4>\n
method_name = <h5>{method.name}</h5>\n
arguments_subheader = <h6>Arguments</h6>\n<ul>\n
description_subheader = <h6>Description</h6>\n<pre>{}</pre>\n
module_link = <li><a href="{module_name}.html">{module_name}</a></li>\n
argument_item = <li><code>{arg.arg}</code></li>\n
import_from = <li><code>from {item.module} import {names}</code></li>\n
import_item = <li><code>import {name.name}</code></li>\n
docs_generated = ‚úÖ Documentation g√©n√©r√©e dans : {docs_dir}
app_file = app.py
docs_dir = docs
lang_code = fr
generate_docs_file = generate_docs.py
index_file = index.html
read_mode = r
self_param = self
if_statement = Si {ast.unparse(stmt.test)}:\n
else_statement = Sinon:\n
src_dir = src
src_prefix = src/
src_file_pattern = src/{f}
src_app_file = src/app.py
src_backslash = src\\
css_file = style.css
stylesheet_link = stylesheet
utf8_encoding = utf-8
utf8_charset = UTF-8
viewport_meta = viewport
write_mode = w
viewport_content = width=device-width, initial-scale=1.0

[__init__]
load_data_func = load_data
run_bonus_func = run_bonus
run_data_analysis_func = run_data_analysis
run_evaluation_func = run_evaluation
run_machine_learning_func = run_machine_learning
run_preprocessing_func = run_preprocessing

[src]
preprocessing = preprocessing